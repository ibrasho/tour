التزامن
Go توفر تراكيب التزامن كجزء من صلب اللغة. هذا الدرس يعرض هذه التراكيب ويعطي أمثلة على كيفية استخدامها.

مؤلفو Go
https://golang.org

* الݠوروتينات

_الݠوروتين_ هو خيط خفيف مدار من مشغل Go.

	go f(x, y, z)

تبدأ ݠوروتين ينفذ

	f(x, y, z)

تقييم `f` و `x` و `y` و `z` يحصل في الݠوروتين الحالية وتنفيذ `f` يحصل في الݠوروتين الجديدة.

الݠوروتينات تشتغل في نفس مساحة العناوين، ولذا الوصول للذاكرة المشتركة يجب أن يكون مزامنًا. حزمة [[https://golang.org/pkg/sync/][`sync`]] تقدم أوليات مفيدة، على الرغم من كونك لن تحتاجها بشكل كبير في  Go لتوفر أوليات آخرى. (انظر شريحة العرض القادمة.)

.play concurrency/goroutines.go

* القنوات

القنوات هي مسالك محددة النوع بإمكانك إرسال واستقبال القيم من خلالها بمعامل القناة، `<-`.

	ch <- v    // Send v to channel ch.
	v := <-ch  // Receive from ch, and
	           // assign value to v.

(البيانات تنساب باتجاه السهم.)

مثل الخرائط والشرائح، لابد من إنشاء القنوات قبل استخدامها:


	ch := make(chan int)

افتراضيًا، الإرسال والاستقبال خلال القناة حابس حتى يكون الطرف الآخر جاهزًا.
هذا يسمح للݠوروتينات بالمزامنة بدون الأقفال الصريحة والمتغيرات الشرطية.

كود المثال يجمع الأعداد في شريحة، موزعًا العمل بين ݠوروتينتين.
متى ما اكملت الݠوروتينات عملها، سيحسب الناتج النهائي.

.play concurrency/channels.go

* القنوات المصونة

القنوات من الممكن جعلها _مصونة_. قدم حجم الصُّوان كمعطى ثاني لدالة `make` لتنشأ قناة مصونة:

	ch := make(chan int, 100)

الإرسال لقناة مصونة يحبس فقط إذا كان الصُّوان مليئًا. الاستقبال يحبس عندما يكون الصُّوان فارغًا.

عدل المثال ليفيض الصُّوان وشاهد ماذا يحدث.

.play concurrency/buffered-channels.go

* الدوران والإغلاق

بإمكان المرسل إغلاق (`close`) القناة للإشعار بعدم وجدد قيمة إضافية سيتم إرسالها. المستقبون بإمكانهم التحقق من كون القناة أغلقت بإسناد متغير ثاني لتعبير الاستقال: بعد تنفيض

	v, ok := <-ch

`ok` سيكون `false` إذا لم يكن هنا المزيد من القيم والقناة مغلقة.

التكرار `for`i`:=`range`c` يستقبل القيم من القناة باستمرار حتى تغلق.

*ملاحظة:* القناة يفترض أن يغلقها المرسل فقط، وليس المستقبل. محاولة الإرسال على قناة مغلقة سيسبب هلعًا (panic).

*ملاحظة*أخرى*: القنوات ليست مثل الملفات؛ لا تحتاج في العادة إلى إغلاقها. تحتاج للإغلاق فقط إذا كان يلزم إبلاغ من المستقبل بأنه لا مزيد من القيم سترسل، مثلا إذا احتجت لإنها تكرار `range`.

.play concurrency/range-and-close.go

* الاختيار

عبارة `select` تجعل الݠوروتين ينتظر بين عدة عمليات تواصل.

عبارة `select` تحبس حتى يمكن تنفيض إحدى حالتها، ومن ثم تنفذ تلك الحالة. يتم الاختيار بشكل عشوائي إذا كانت عدة حالات جاهزة.

.play concurrency/select.go

* الاختيار الافتراضي

حالة `default` في `select` تنفذ إذا لم تكن أي حالة آخرى جاهزة.

استخدم حالة `default` لتجرب الإرسال أو الاستقبال بدون حبس:

	select {
	case i := <-c:
		// use i
	default:
		// receiving from c would block
	}

.play concurrency/default-selection.go

* تمرين: الأشجار الثنائية المتكافئة

هناك العديد من الأشجار الثنائية بنفس تسلسل القيم المخزنة في الأطراف.
مثلًا، هناك شجرتين ثنائية تخزن التسلسل 1, 1, 2, 3, 5, 8, 13.

.image /content/img/tree.png

كتابة دالة للتحقق من كون شجرتين ثنائية تخزن نفس التسلسل عملية معقدة في أغلب لغات البرمجة. سنستخدم التزامن والقنوات في Go لنكتب حلًا بسيطًا.

هذا المثال يستخدم حزمة `tree`، وهي تعرف النوع:

	type Tree struct {
		Left  *Tree
		Value int
		Right *Tree
	}

أكمل الشرح في [[javascript:click('.next-page')][الصفحة التالية]].

* تمرين: الأشجار الثنائية المتكافئة

*1.* طبّق دالة `Walk`.

*2.* اختبر دالة `Walk`.

الدالة `tree.New(k)` تكون شجرة ثنائية مبنية عشوائيًا تحمل القيم `k`، `2k`، `3k`، ...، `10k`.

أنشئ قناة جديدة `ch` وشغل:

	go Walk(tree.New(1), ch)

ومن ثم إقرأ وأطبع 10 قيم من القناة. ينبغي أن تكون الأرقام 1، 2، 3، ...، 10.

*3.* طبّق دالة `Same` باستخدام `Walk` لتحديد ما إذا كان `t1` و `t2` يخزنان نفس القيم.

*4.* اختبر دالة `Same`.

`Same(tree.New(1),`tree.New(1))` ينبغي أن ترجع `true` و `Same(tree.New(1),`tree.New(2))` ينبغي أن ترجع `false`.

توثيق `Tree` موجود [[https://godoc.org/golang.org/x/tour/tree#Tree][هنا]].

.play concurrency/exercise-equivalent-binary-trees.go

* sync.Mutex

لقد استعرضنا روعة القنوات في التواصل بين الݠوروتينات.

لكن ماذا إذا كنا لا نحتاج للتواصل؟ ماذا إذا احتجنا للتأكد من أن ݠوروتين واحدة فقط تستطيع الوصول لمتغير لتلافي الصدام؟


هذا المفهوم يسمى _استبعاد_التشارك_، والاسم المتعارف عليه لتركيب البيانات الذي يقدمه هو _mutex_.

المكتبة المعيارية في Go تقدم استبعاد التشارك بتركيب
[[https://golang.org/pkg/sync/#Mutex][`sync.Mutex`]] (المستخلص) ذو الدالتين:

- `Lock`
- `Unlock`

نستطيع تعريف جزء من الكود يتم تفيذها باستثناء متبادل عبر تحويطها
باستدعاء `Lock` و `Unlock` كما هو معرض في دالة `Inc`.

نستطيع أيضًا استخدام `defer` للتأكد من كون المستخلص `Mutex` سيفتح كما في دالة `Value`.

.play concurrency/mutex-counter.go

* تمرين: دابّ الشكبة

في هذا التمرين ستستخدم خواص التزامن في Go لتنفيذ عمل دابّ شبكة بالتوازي.

عدل دالة `Crawl` لتجلب الروابط بالتوازي بدون جلب نفس الرابط مرتين.

_مساعدة_: بإمكانك تخزين نسخة من الروابط التي تم جلبها في خريطة،
ولكن الخريطة لوحدها لا يمكن استخدامها بالتزامن بشكل آمن!

.play concurrency/exercise-web-crawler.go

* أين نذهب من هنا...

#appengine: بإمكانك البدأ
#appengine: [[https://golang.org/dl/][بتنصيب Go]].

#appengine: متى ما نصبت Go،
[[https://golang.org/doc/][توثيق Go]] مكان رائع
#appengine: للاستمرار.
للبدء.
التوثيق يحتوي على مراجع ودروس ومقاطع والمزيد.

لتتعلم كيف ترتب وتعمل مع أكواد Go، شاهد [[https://www.youtube.com/watch?v=XCsL89YtqCs][هذه التسجيل المرئي]] أو إقرأ [[https://golang.org/doc/code.html][كيف تكتب كود Go]].

إذا كنت تحتاج للمساعدة مع المكتبة المعيارية، اطلع على [[https://golang.org/pkg/][مرجع الحزمة]]. للمساعدة مع اللغة نفسها ستتفاجئ بكون  [[https://golang.org/ref/spec][توصيف الغة]] سهل القراءة.

لتستكشف نموذج التزامن في Go، شاهد
[[https://www.youtube.com/watch?v=f6kdp27TYZs][أنماط التزامن في Go]]
([[https://talks.golang.org/2012/concurrency.slide][شرائح العرض]])
و
[[https://www.youtube.com/watch?v=QDDwwePbDtw][أنماط التزامن المتقدمة في Go]]
([[https://talks.golang.org/2013/advconc.slide][شرائح العرض]])
وأقرأ جولة
[[https://golang.org/doc/codewalk/sharemem/][شارك الذاكرة بالتواصل]].

لتبدأ كتابة تطبيقات الشبكة شاهد
[[https://vimeo.com/53221558][بيئة برمجة بسيطة]]
([[https://talks.golang.org/2012/simple.slide][شرائح العرض]])
وأقرأ درس
[[https://golang.org/doc/articles/wiki/][كتابة تطبيقات الشبكة]].

جولة [[https://golang.org/doc/codewalk/functions/][دوال الدرجة الأولى في Go]] تعطي منظور مثير للاهتمام على أنواع الدوال في Go.

[[https://blog.golang.org/][مدونة Go]] فيها أرشيف كبير من المقالات المثرية حول Go.

زر [[https://golang.org][golang.org]] للاطلاع على المزيد.
