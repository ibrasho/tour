تعليمات توجيه المسار: for و if و else و switch و defer
تعلم كيف تتحكم في مسار كودك بالجمل الشرطية والتكرار والقواطع والمؤجلات.

مؤلفو Go
https://golang.org

* For

في Go عبارة تكرار واحدة وهي تكرار `for`.

تكرار `for` الأساسي له ثلاثة مكونات مفصولة بفواصل منقوطة:

- عبارة البدأ: تنفذ قبل الدورة الأولى
- تعبير الشرط: تنفذ قبل كل دورة
- العبارة البعدية: تنفذ بعد كل دورة

عبارة البدأ ستكون في الغالب إعلان متغير قصير والمتغيرات المعلنة هناك مرئية فقط في نطاق عبارة الـ`for`.

التكرار سيتوقف متى ما تقدر الشرط البولي بـ `false`.

_ملاحظة_: على عكس اللغات الآخرى مثل C أو Java أو Javascript، ليس هناك أقواس تحيط بالمكونات الثلاثة لعبارة `for` والحواصر `{`}` مطلوبة دائمة.

.play flowcontrol/for.go

* تابع For

عبارة البدأ والعبارة البعدية اختيارية.

.play flowcontrol/for-continued.go

* For هي "while" في Go

في هذه الحالة بإمكانك طرح الفواصل المنقوطة: `while` في C تكتب `for` في Go.

.play flowcontrol/for-is-gos-while.go

* للأبد

إذا لم تكتب العبارة الشرطية سيستمر التكرار للأبد، وهذه طريقة مختصرة لتعريف تكرار أبدي.

.play flowcontrol/forever.go

* إذا

عبارات `if` في Go مثل تكرار `for`"؛ لا يلزم أن تحوط العبارة بأقواس `(`)` ولكن الحواصر `{`}` مطلوبة.

.play flowcontrol/if.go

* If مع عبارة قصيرة

مثل `for`، عبارة `if` يمكن أن تبدأ بعبارة قصيرة لتنفذ قبل الشرط.

المتغيرات المعلنة في العبارة متاحة في النطاق حتى نهاية عبارة `if`.

(جرب استخدام `v` في آخر عبارة `return`.)

.play flowcontrol/if-with-a-short-statement.go

* إذا وما عدا "If and else"

المتغيرات المعلنة داخل عبارة `if` قصيرة متاحة داخل أي كتلة `else`.

(كلا استدعائي `pow` تنفذ وترجع قبل أن يبدأ استدعاء `fmt.Println` في `main`.)

.play flowcontrol/if-and-else.go

* تمرين: التكرار والدوال

كطريقة للعب مع الدوال والتكرار، طبق دالة الجذر المربع باستخدام طريقة نيوتن.

طريقة نيوتن هي تقريب `Sqrt(x)` باختيار نقطة بداية _z_ وتكرار:

.image /content/img/newton.png

مساعدة: كرر ورجع القيمة النهائية لـ _z_ كإجابة:

	z -= (z*z - x) / (2*z)

لتبدأ، كرر الحساب 10 مرات وشاهد كيف تقترب من النتيجة في كل تكرار.

بعد ذلك، غير شرط التكرار ليتوقف متى ما توقفت القيمة عن التغير (أو تغيرت بشكل طفيف جدًا). راقب هل سيكون هذا خلال أقل من 10 دورات. ما مقدار الشبه بين حلك ودالة [[https://golang.org/pkg/math/#Sqrt][math.Sqrt]]?

مساعدة: لتعلن قيمة فاصلة عائمة استخدم صيغة الفاصلة العائمة أو استخدم التحويل:

	z := float64(1)
	z := 1.0

.play flowcontrol/exercise-loops-and-functions.go

* القاطع

في الغالب، أنت تعرف كيف سيبدو شكل عبارة `switch`.

محتوى الحالة ينتهي مباشرة، إلا إذا كانت تنتهي بعبارة `fallthrough`.

.play flowcontrol/switch.go

* ترتيب تقييم القاطع

حالات القاطع تقيم من الأعلى للأسفل، وتتوقف حالما تنطبق إحدى الحالات.

(كمثال،

	switch i {
	case 0:
	case f():
	}

لا تستدعي `f` إذا كانت `i==0`.)

#appengine: *ملاحظة:* الوقت في ساحة لعب Go دائما يبدأ في
#appengine: 2009-11-10 23:00:00 UTC، وهذه قيمة نترك تحديد أهميتها
#appengine: للقارئ كتمرين.

.play flowcontrol/switch-evaluation-order.go

* القطاع بدون شرط

القاطع بدون شرط مثل `switch`true`.

هذا التركيب يمكن استخدامه كطريقة نظيفة لكتابة سلاسل إذا-ثم-ماعدا الطويلة.

.play flowcontrol/switch-with-no-condition.go

* التأجيل

عبارة التأجيل `defer` تؤجل تنفيذ الدالة حتى ترجع الدالة المحيطة الحالية.

معطيات الاستدعاء المؤجل تقيم بشكل فوري، ولكن استدعاء الدالة لا ينفذ حتى ترجع الدالة المحيطة.

.play flowcontrol/defer.go

* تكديس التأجيل

استدعاءات الدوال المؤجلة ترص على كومة. عندما ترجع الدالة، الاستدعاءات المؤجلة تنفذ بطريقة خروج-بترتيب-الورود.

لتتعلم المزيد عن عبارات التأجيل إقرأ
[[https://blog.golang.org/defer-panic-and-recover][نشرة المدونة]].

.play flowcontrol/defer-multi.go

* مبروك!

لقد انهيت هذا الدرس!

بإمكانك العودة إلى  [[/list][القائمة]] لتختار ما تتعلمه، أو الاستمرار إلى [[javascript:click('.next-page')][الدرس التالي]].

