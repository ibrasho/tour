المزيد من الأنواع: التراكيب والشرائح والخرائط
تعلم كيف تعرف الأنواع بناء على أنواع موجودة: هذا الدرس يغطي التراكيب والمصفوفات والشرائح والخرائط.

مؤلفو Go
https://golang.org

* المؤشرات

Go لديها مؤشرات.
المؤشر يحمل عنوان الذاكرة لقيمة.

النوع `*T` هو مؤشر لقيمة من نوع `T`. القيمة الصفرية له هي `nil`.

	var p *int

معامل `&` ينتج مؤشر لمعامله.

	i := 42
	p = &i

معامل `*` يبين القيمة الضمنية للمؤشر.

	fmt.Println(*p) // read i through the pointer p
	*p = 21         // set i through the pointer p

هذا يعرف بعكس الإحالة أو الارتجاع.

على عكس C، لا يوجد عمليات رياضية على المؤشرات في Go.

.play moretypes/pointers.go

* التراكيب

الـ `struct` هو مجموعة من الحقول.

.play moretypes/structs.go

* حقول التراكيب

حقول التراكيب يمكن الوصول لها بالنقطة.

.play moretypes/struct-fields.go

* المؤشرات للتراكيب

حقول التراكيب يمكن الوصول لها عبر مؤشر لتركيب.

للوصول للحقل `X` لتركيب عندما يكون لدينا مؤشر التركيب `p` بإمكاننا كتابة `(*p).X`.

ولكن، هذه , that الطريقة متعبة. ولذا اللغة تمكننا من كتابة `p.X` بدون عكس الإحالة الصريح.

.play moretypes/struct-pointers.go

* التراكيب الحرفية

التركيب الحرفي يبين قيمة تركيب مسندة حديثًا بسرد قيم حقوله.

بإمكانك سرد مجموعة جزئية من الحقول باستخدام صيغة `Name:`. (وترتيب الحقول غير مهم.)

السابقة الخاصة `&` ترجع مؤشر لقيمة التركيب.

.play moretypes/struct-literals.go


* المصفوفات

النوع `[n]T` هو مصفوفة من `n` قيمة من النوع `T`.

العبارة

	var a [10]int

تعلن متغير `a` كمصفوفة من عشرة أعداد صحيحة.

طول المصفوفة هو جزء من نوعها، ولذا المصفوفات لا يمكن تغيير حجمها.
هذا يبدو مقيدًا ولكن لا تقلق؛
Go تقدم طريقة مريحة للتعامل مع المصفوفات.

.play moretypes/array.go


* الشرائح

المصفوفة لها حجم ثابت.
الشريحة، على النقيض، هي رؤية مرنة ديناميكية الحجم على عناصر مصفوفة.
عمليًا، الشرائح أكقر شيوعًا من المصفوفات.

النوع `[]T` هو شريحة عناصر من نوع `T`.

الشريحة تتكون بتحديد عنوانين، حد أدني وحد أعلى، مفصولين بنقطتين:

	a[low : high]

هذا يختار مدى نصف مفتوح يتضمن أول عنصر ولكن يستثني آخر عنصر.

التعبير التالي ينشئ شريحة تتضمن العناصر 1 حتى 3 من `a`:

	a[1:4]

.play moretypes/slices.go


* الشرائح مثل الإحالات على المصفوفات

الشريحة لا تخزن أي بيانات، وإنما توصف جزء من المصفوفة الضمنية.

تغيير عناصر الشريحة يغير العناصر المقابلة في المصفوفة الضمنية.

الشرائح الآخرى التي تتشارك نفس المصفوفة الضمنية سترى هذه التغييرات.

.play moretypes/slices-pointers.go


* الشرائح الحرفية

الشريحة الحرفية مثل المصفوفة الحرفية ولكن بدون الطول.

هذه مصفوفة حرفية:

	[3]bool{true, true, false}

وهذا ينشئ نفس المصفوفة في الأعلى ومن ثم يبني شريحة تحيل عليها:

	[]bool{true, true, false}

.play moretypes/slice-literals.go


* افتراضيات الشرائح

عندما تشرح مصفوفة، بإمكانك ترك الحد الأعلى أو الأدنى لاستخدام الافتراض.

الافتراض هو صفر للحد الأدنى وطول الشريحة للحد الأعلى.

للمصفوفة

	var a [10]int

تعبيرات التشريح هذه متماثلة:

	a[0:10]
	a[:10]
	a[0:]
	a[:]

.play moretypes/slice-bounds.go


* طول الشريحة وسعتها

لكل شريحة _طول_ و _سعة_.

طول الشريحة هو عدد العناصر المضمنة فيها.

سعة الشريحة هو عدد العناصر في المصفوفة الضمنية، بدءً من العنصر الأول في الشريحة.

طول وسعة الشريحة يمكن الحصول عليها بالتعابير `len(s)` و `cap(s)`.

بإمكانك زيادة طول شريحة بإعادة تشريحها، بشرط توفر السعة الكافية.
جرب تغيير عمليات الشرائح في المثال لتوسيعها فوق سعتها لتتعرف على ماذا سيحدث.

.play moretypes/slice-len-cap.go


* الشرائح المعدومة

القيمة الصفرية للشرائح هي `nil`.

الشريحة المعدومة طولها وسعتها 0 وليس لها مصفوفة ضمنية.

.play moretypes/nil-slices.go


* إنشاء شريحة باستخدام make

يمكن إنشاء الشرائح باستخدام دالة `make` المضمنة؛
هذه هي الطريقة التي تنشأ بها مصفوفات ديناميكية الحجم.

دالة `make` ترصد مصفوفة صفرية وترجع شريحة تحيل  عليها:

	a := make([]int, 5)  // len(a)=5

لتحديد السعة، مرر معطى ثالث لـ `make`:

	b := make([]int, 0, 5) // len(b)=0, cap(b)=5

	b = b[:cap(b)] // len(b)=5, cap(b)=5
	b = b[1:]      // len(b)=4, cap(b)=4

.play moretypes/making-slices.go


* شرائح الشرائح

الشرائح يمكن أن تحتوي على أي نوع، بما في ذلك شرائح آخرى.

.play moretypes/slices-of-slice.go


* الإضافة لشريحة

من المعتاد إضافة عناصر جديدة لشريحة، لذا توفر Go دالة `append` الضمنية.
[[https://golang.org/pkg/builtin/#append][التوثيق]] للحزمة الضمنية يشرح `append`.

	func append(s []T, vs ...T) []T

المعطى الأول `s` لـ `append` هو شريحة من نوع `T`، والباقي هي قيم من نوع `T` لتضاف للشريحة.

القيمة الراجعة من `append` هي شريحة تحتوي على جميع عناصر الشريحة الأصلية مع القيم المعطاة.

إذا كانت المصفوفة الضمنية لـ  `s` أصغر من أن تسع جميع القيم سيتم رصد مصفوفة أكبر.
الشريحة الراجعة ستحيل على المصفوفة الجديدة.

(للتعرف على المزيد عن الشرائج، اطلع على منشور [[https://blog.golang.org/go-slices-usage-and-internals][Slices: usage and internals]].)

.play moretypes/append.go


* الدوران (`range`)

شكل الـ `range` من تكرار `for` يعدد على قيم شريحة أو خريطة.

عند الدوران على شريحة، سترجع قيمتين لكل دورة.
الأولى هي المؤشر، والثانية هي نسخة من العنصر عند ذلك المؤشر

.play moretypes/range.go

* تابع الدوران

بإمكانك تجاهل المؤشر أو القيمة بإسنادها إلى `_`.

    for i, _ := range pow
    for _, value := range pow

إذا كنت تريد المؤشر فقط، تجاهل القيمة الثانية تمامًا.

    for i := range pow

.play moretypes/range-continued.go

* تمرين: الشرائح

طبّق `Pic`. ينبغي أن ترجع شريحة ذات طول `dy`، وكل عنصر فيها هو شريحة مكونة من `dx` عناصر من النوع `uint8`. عندما يشتغل البرنامج، سيعرض صورتك، معتبرًا الأرقام قيم ألوان من درجات الرصاصي (الأزرق حقيقة)

اختيار الصورة متروك لك. من الدوال المثيرة `(x+y)/2` و `x*y` و `x^y`.

(ستحتاج لاستخدام تكرار لرصد كل `[]uint8` داخل الـ `[][]uint8`.)

(استخدم `uint8(intValue)` للتحويل بين الأنواع.)

.play moretypes/exercise-slices.go

* الخرائط

الخرائط تربط مفاتيح بقيم.

القيمة الصفرية للخرائط هي `nil`.
الخريطة `nil` ليس فيها مفاتيح ولا يمكن إضافة مفاتيح لها.

الدالة `make` ترجع خريطة من النوع المعطى، منشئة وجاهزة للاستخدام.

.play moretypes/maps.go

* الخرائط الحرفية

الخرائط الحرفية مثل التراكيب الحرفية، ولكن تتطلب المفاتيح.

.play moretypes/map-literals.go

* تابع الخرائط الحرفية

إذا كان النوع الرئيسي اسم نوع بإمكانك طرحه من عناصر الخريطة الحرفية.

.play moretypes/map-literals-continued.go

* تغيير الخرائط

إضافة أو تحديث عنصر في الخريطة `m`:

	m[key] = elem

جلب عنصر:

	elem = m[key]

حذف عنصر:

	delete(m, key)

اختبار وجود مفتاح باستخدام اسناد قيمتين:

	elem, ok = m[key]

إذا كان `key` معرف في `m`، قيمة `ok` ستكون `true`. وفي العكس، سيكون `ok` يساوي `false`.

إذا كان `key` غير معرف في الخريطة، قيمة `elem` هي القيمة الصفرية لنوع عناصر الخريطة.

*ملاحظة*: إذا كان `elem` أو `ok` لم يعلنا بعد، بإمكانك استخدام شكل الإعلان القصير:

	elem, ok := m[key]

.play moretypes/mutating-maps.go

* تمرين: الخرائط

طبّق `WordCount`. ينبغي أن ترجع خريطة من عدد كل "كلمة" في السلسلة `s`. دالة `wc.Test` تشغل مجموعة اختبارات على الدالة المعطاة وتطبع نتيجة النجاح أو الفشل.

قد تجد توثيق [[https://golang.org/pkg/strings/#Fields][strings.Fields]] مفيدّا.

.play moretypes/exercise-maps.go

* قيم الدوال

الدوال لها قيم كذلك. بإمكانك تمريرها مثل القيم الآخرى.

قيم الدوال يمكن استخدامها كمعطيات دوال وقيم راجعة.

.play moretypes/function-values.go

* دوال الإغلاق

الدوال في Go يمكن أن تكون إغلاقات. الإغلاق هو قيمة دالة تذكر متغيرات خارجها. الدالة يمكن أن تصل إلى المتغيرات المذكورة أو تسند إليها؛ وبهذا الاعتبار الدالة "مرتبطة" بالمتغيرات.

مثلًا، دالة `adder` ترجع إغلاق. كل إغلاق مرتبط بمتغير `sum` خاص فيها.

.play moretypes/function-closures.go

* تمرين: إغلاق فيبوناتشي

لنستمتع مع الدوال.

طبّق دالة `fibonacci` ترجع دالة (إغلاق) يرجع
 [[https://en.wikipedia.org/wiki/Fibonacci_number][أرقام فيبوناتشي]] متتالية
(0، 1، 1، 2، 3، 5، ...).

.play moretypes/exercise-fibonacci-closure.go

* مبروك!

لقد انهيت هذا الدرس!

بإمكانك العودة إلى  [[/list][القائمة]] لتختار ما تتعلمه، أو الاستمرار مع [[javascript:click('.next-page')][الدرس التالي]].
