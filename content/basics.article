الحزم والمتغيرات والدوال.
تعرف على المكونات الأساسية لأي برنامج Go.

مؤلفو Go
https://golang.org

* الحزم (Packages)

كل برنامج Go مكون من عدة حزم.

البرامج تبدأ في الحزمة `main`.

هذا البرنامج يستخدم الحزم التي مسار استيرادها `"fmt"` و `"math/rand"`.

عرفيًا، اسم الحزمة هو آخر جزء في مسار الاستيراد. مثال: حزمة `"math/rand"` تتكون من ملفات تبدأ بالعبارة `package`rand`.

#appengine: *ملاحظة:* البيئة التي تنفذ فيها هذه البرامج حتمية،
#appengine: ولذا `rand.Intn` سترجع نفس القيمة في كل مرة تنفذ البرنامج.
#appengine: (لتحصل على قيم مختلفة، أعط مولد الأرقام بذرة مختلفة× اطلع على see [[https://golang.org/pkg/math/rand/#Seed][`rand.Seed`]].
#appengine: الوقت ثابت في ساحة اللعب، ولا ستحتاج شيء مختلف كبذرة للمولد.)

.play basics/packages.go

* الاستيراد (Imports)

تستخدم العبارة `import` لاستيراد الحزم. ويمكن استخدامها لاستيراد عدة حزم مرة واحدة أو استيراد كل حزمة على حدة.

مثلًا، هذا الكود يجمع الاستيرادات في عبارة `import` واحدة مجمعة ومحاطة بأقواس.

بإمكانك أيضًا كتابة عدة عبارات `import` متتالية، مثلًا:

	import "fmt"
	import "math"

لكن استخدام عبارة الاستيراد المجمعة يعتبر من الأساليب الجيدة.

.play basics/imports.go

* المعرّفات المصدّرة (Exported names)

في Go، المعرّف يصدّر إذا كان يبدأ بحرف كبير.
مثلًا، `Pizza` معرّف مصدّر، وكذلك `Pi` المصدر من حزمة `math`.

`pizza` و `pi` لا تبدأ بحروف كبيرة، ولذا فهي غير مصدرة.

عندما تستورد حزمة، بإمكانك الإحالة على المعرّفات المصدّرة فقط.
أي معرّف "غير مصدّر" لا يمكن الوصول له من خارج الحزمة.

شغل الكود وانتبه لرسالة الخطأ.

لتصليح الخطأ غير `math.pi` إلى `math.Pi` وحاول مجددًا.

.play basics/exported-names.go

* الدوال (Functions)

الدالة من الممكن أن تكون بدون معطيات، أو أن تأخذ معطى أو أكثر.

في هذا المثال، `add` تأخذ معطيين من نوع `int`.

انتبه لكون النوع يأتي بعد اسم المتغير.

(لمعرفة المزيد عن أسباب كون الأنواع تعرف بهذه الطريقة، اطلع على [[https://blog.golang.org/gos-declaration-syntax][المقالة حول صيغة الإعلان في Go]].)

.play basics/functions.go

* الدوال (تابع )

عندما يتشارك معطيات متتاليان في النوع، يمكن إسقاط النوع من جميع المعطيات قبل الأخير.

في هذا المثال اختصرنا

	x int, y int

إلى

	x, y int

.play basics/functions-continued.go

* النتائج المتعددة (Multiple returns)

يمكن للدالة أن ترجع أي عدد من النتائج.

دالة `swap` ترجع سلسلتين.

.play basics/multiple-results.go

* القيم الراجعة المسماة (Named return values)

القيم الراجعة في Go يمكن أن تسمى. وإذا سميت فهي تعامل كالمتغيرات المعرفة في بداية الدالة.

ينبغي استخدام هذه الأسماء لتوثيق معنى القيم الراجعة.

عبارة `return` بدون معطيات ترجع القيم الراجعة المسماة. هذا يسمى بالإرجاع العاري.

عبارات الإرجاع العاري ينبغي استخدامها في الدوال القصيرة فقط، كما في هذا المثال، لأنها يمكن أن تضر بقابلية القراءة في الدوال الطويلة.

.play basics/named-results.go

* المتغيرات (Variables)

عبارة `var` تعلن قائمة من المتغيرات؛ وكما في معطيات الدوال، النوع يتبع الاسم.

عبارة `var` يمكن أن تكون على مستوى الحزمة أو الدالة. ونرى الحالين في هذا المثال.

.play basics/variables.go

* المتغيرات مع مؤسسات (Variables with initializers)

إعلان `var` يمكن أن يحتوى على مؤسسات لكل متغير.

إذا كان هناك مؤسس، يمكن طرح النوع وسيأخذ المتغير نوع المؤسس.

.play basics/variables-with-initializers.go

* إعلان المتغير القصير (Short varibale declaration)

داخل الدوال، يمكن استخدام عبارة الإسناد القصير `:=` بدلًا من إعلان `var` بنوع مضمر.

خارج الدوال، لابد أن تبدأ كل عبارة بكلمة مفتاحية (`var`، `func`، إلخ) ولذا لا يمكن استخدام `:=`.

.play basics/short-variable-declarations.go

* الأنواع الأساسية (Basic types)

الأنواع الأساسية في Go

	bool

	string

	int  int8  int16  int32  int64
	uint uint8 uint16 uint32 uint64 uintptr

	byte // alias for uint8

	rune // alias for int32
	     // represents a Unicode code point

	float32 float64

	complex64 complex128

هذا المثال يعرض متغيرات من أنواع متعددة،
ويمكن جمع إعلانات المتغيرات في قطع كما في عبارات الاستيراد.

أنواع `int`، `uint`، و `uintptr` عادة تكون بعرض 32 بت على أنظمة 32-بت و 64 بت على أنظمة 64-بت.
عندما تريد قيمة عدد ينبغي استخدام `int` إلا إذا كان لديك سبب محدد لاستخدام نوع بحجم محدد أو بدون إشارة.

.play basics/basic-types.go

* القيمة الصفرية (Zero value)

المتغيرات المعلنة بدون قيمة أولية صريحة تعطى
_القيمة_الصفرية_.

القيمة الصفرية هي:

- `0` لأنواع الأعداد
- `false` للنوع البولي
- `""` (السلسلة الفارغة) للسلاسل.

.play basics/zero.go

* تحويل الأنواع (Type conversions)

التعبير `T(v)` يحول القيمة `v` إلى النوع `T`.

بعض تحويلات الأعداد:

	var i int = 42
	var f float64 = float64(i)
	var u uint = uint(f)

أو ببساطة:

	i := 42
	f := float64(i)
	u := uint(f)

على عكس C، الإسناد بين الأنواع المختلفة في Go يتطلب التحويل الصريح.
جرب إزالة التحول إلى `float64` أو `uint` في المثال وشاهد ماذا سيحصل.

.play basics/type-conversions.go

* استنباط الأنواع (Type inference)

عندنا تعلن متغير بدون تحديد نوع صريح (إما عن طريق صيغة `:=` أو تعبير `var`=`) سيتم استنباط نوع المتغير من القيمة في الجانب الأيمن.

عندما يكون للجانب الأيمن نوع، سيكون المتغير الجديد من نفس النوع:

	var i int
	j := i // j is an int

ولكن عندما يحتوي الجانب الأيمن على ثابت عددي بدون نوع، سيكون نوع المتغير الجديد إما `int` أو `float64` أو `complex128` على حسب دقة الثابت على الجانب الأيمن:

	i := 42           // int
	f := 3.142        // float64
	g := 0.867 + 0.5i // complex128

جرب تغيير القيمة الأولية لـ `v` في كود المثال وراقب كيف يتغير النوع.

.play basics/type-inference.go

* الثوابت (Constants)

الثوابت تعرف كما المتغيرات، ولكن بالكلمة المفتاحية `const`.

الثوابت يمكن أن تكون قيم حرف أو سلسلة أو بوليان أو عدد.

الثوابت لا يمكن أن تعرف باستخدام صيغة `:=`.


.play basics/constants.go

* الثوابت الرقمية (Numeric constants)

الثوابت الرقمية هي _قيم_ عالية الدقة.

الثابت غير محدد النوع سيأخذ النوع المناسب لسياقه.

جرب طباعة `needInt(Big)`.

(القيم من نوع `int` يمكن أن يخزن بحد أقصى رقم صحيح من 64-بت، وأحيانًا أقل.)

.play basics/numeric-constants.go

* مبروك!

لقد انهيت هذا الدرس!

بإمكانك العودة إلى  [[/list][القائمة]] لتختار ما تتعلمه، أو الاستمرار إلى [[javascript:click('.next-page')][الدرس التالي]].
