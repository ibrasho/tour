الوظائف والواجهات
هذا الدرس يغطي الوظائف والواجهات: المكونات التي تعرف الأشياء وتصرفها.

مؤلفو Go
https://golang.org

* الوظائف

Go لا تحتوى على أصناف.
ولكن بإمكانك تعريف الوظائف على الأنواع.

الوظيفة هي دالة لها معطى ـمستقبلـ خاص.

المستقبل يظهر في قائمة معطيات خاصة به بين كلمة `func` واسم الوظيفة.

في هذا المثال وظيفة `Abs` لها مستقبل من نوع `Vertex` اسمه `v`.

.play methods/methods.go

* الوظائف هي دوال

تذكر: الوظيفة هي دالة لها مستقبل معطى.

هنا `Abs` مكتوبة كدالة عادية بدون تغير في عملها.

.play methods/methods-funcs.go

* تابع الوظائف

بلإمكانك إعلان وظيفة على الأنواع غير التراكيب.

في هذا المثال نرى نوع رقمي  `MyFloat` له وظيفة `Abs`.

لا يمكنك إعلان وظيفة بمستقبل إلا إذا كان نوع المستقبل معرف في نفس الحزمة.
لا يمكنك إعلان وظيفة بمستقبل معرف في رمز آخرى (هذا يتضمن الأنواع المضمنة مثل `int`).

.play methods/methods-continued.go

* المستقبلات المؤشرات

بإمكانك إعلان وظيفة بمستقبل مؤشر.

هذا يعني أن نوع المستقبل له الصيغة الحرفية `*T` لنوع `T`.
(أيضًا، `T` لا يمكن أن يكون مؤشرًا مثل `*int`.)

مثلًا: الوظيفة `Scale` معرف على `*Vertex`.

الوظائف المعرفة على مؤشرات بإمكانها تعديل القيمة التي يؤشر عليها
المستقبل (كما تفعل `Scale` هنا).
بما أن الوظائف تحتاج عادة للتعديل على المستقبل، المستقبلات المؤشرات أكثر
شيوعًا من المستقبلات القيم.

جرب إزالة الـ`*` من إعلان دالة `Scale` في سطر 16 وراقب كيف يتغير تصرف البرنامج.

باستخدام مستقبل قيمة، وظيفة `Scale` تتعامل مع نسخة من قيمة `Vertex` الأصلية.
(هذا نفس التصرف لأي معطى دالة.)
طريقة `Scale` يجب أن تكون على مستقبل مؤشر لتغير قيمة`Vertex` المعلنة في دالة `main`.

.play methods/methods-pointers.go

* المؤشرات والدوال

لقد أعدنا كتابة الطريقتين `Abs` و `Scale` كدوال.

مجددًا، جرب أن تزيل الـ `*` من سطر 16.
هل تستطيع معرفة لماذا تغير تصرف البرنامج؟
ماذا ينبغي أن نغير أيضًا لنتمكن من ترجمة البرنامج؟


(إذا لم تكن متأكدًا، أكمل للصفحة التالي.)

.play methods/methods-pointers-explained.go

* Methods and pointer indirection

Comparing the previous two programs, you might notice that
functions with a pointer argument must take a pointer:

	var v Vertex
	ScaleFunc(v, 5)  // Compile error!
	ScaleFunc(&v, 5) // OK

while methods with pointer receivers take either a value or a pointer as the
receiver when they are called:

	var v Vertex
	v.Scale(5)  // OK
	p := &v
	p.Scale(10) // OK

For the statement `v.Scale(5)`, even though `v` is a value and not a pointer,
the method with the pointer receiver is called automatically.
That is, as a convenience, Go interprets the statement `v.Scale(5)` as
`(&v).Scale(5)` since the `Scale` method has a pointer receiver.

.play methods/indirection.go

* Methods and pointer indirection (2)

The equivalent thing happens in the reverse direction.

Functions that take a value argument must take a value of that specific type:

	var v Vertex
	fmt.Println(AbsFunc(v))  // OK
	fmt.Println(AbsFunc(&v)) // Compile error!

while methods with value receivers take either a value or a pointer as the
receiver when they are called:

	var v Vertex
	fmt.Println(v.Abs()) // OK
	p := &v
	fmt.Println(p.Abs()) // OK

In this case, the method call `p.Abs()` is interpreted as `(*p).Abs()`.

.play methods/indirection-values.go

* Choosing a value or pointer receiver

There are two reasons to use a pointer receiver.

The first is so that the method can modify the value that its receiver points to.

The second is to avoid copying the value on each method call.
This can be more efficient if the receiver is a large struct, for example.

In this example, both `Scale` and `Abs` are with receiver type `*Vertex`,
even though the `Abs` method needn't modify its receiver.

In general, all methods on a given type should have either value or pointer
receivers, but not a mixture of both.
(We'll see why over the next few pages.)

.play methods/methods-with-pointer-receivers.go

* Interfaces

An _interface_type_ is defined as a set of method signatures.

A value of interface type can hold any value that implements those methods.

*Note:* There is an error in the example code on line 22.
`Vertex` (the value type) doesn't implement `Abser` because
the `Abs` method is defined only on `*Vertex` (the pointer type).

.play methods/interfaces.go

* Interfaces are implemented implicitly

A type implements an interface by implementing its methods.
There is no explicit declaration of intent, no "implements" keyword.

Implicit interfaces decouple the definition of an interface from its
implementation, which could then appear in any package without prearrangement.

.play methods/interfaces-are-satisfied-implicitly.go

* Interface values

Under the covers, interface values can be thought of as a tuple of a value and a
concrete type:

	(value, type)

An interface value holds a value of a specific underlying concrete type.

Calling a method on an interface value executes the method of the same name on
its underlying type.

.play methods/interface-values.go

* Interface values with nil underlying values

If the concrete value inside the interface itself is nil,
the method will be called with a nil receiver.

In some languages this would trigger a null pointer exception,
but in Go it is common to write methods that gracefully handle being called
with a nil receiver (as with the method `M` in this example.)

Note that an interface value that holds a nil concrete value is itself non-nil.

.play methods/interface-values-with-nil.go

* Nil interface values

A nil interface value holds neither value nor concrete type.

Calling a method on a nil interface is a run-time error because there is no
type inside the interface tuple to indicate which _concrete_ method to call.

.play methods/nil-interface-values.go

* The empty interface

The interface type that specifies zero methods is known as the _empty_interface_:

	interface{}

An empty interface may hold values of any type.
(Every type implements at least zero methods.)

Empty interfaces are used by code that handles values of unknown type.
For example, `fmt.Print` takes any number of arguments of type `interface{}`.

.play methods/empty-interface.go

* Type assertions

A _type_assertion_ provides access to an interface value's underlying concrete value.

	t := i.(T)

This statement asserts that the interface value `i` holds the concrete type `T`
and assigns the underlying `T` value to the variable `t`.

If `i` does not hold a `T`, the statement will trigger a panic.

To _test_ whether an interface value holds a specific type,
a type assertion can return two values: the underlying value
and a boolean value that reports whether the assertion succeeded.

	t, ok := i.(T)

If `i` holds a `T`, then `t` will be the underlying value and `ok` will be true.

If not, `ok` will be false and `t` will be the zero value of type `T`,
and no panic occurs.

Note the similarity between this syntax and that of reading from a map.

.play methods/type-assertions.go

* Type switches

A _type_switch_ is a construct that permits several type assertions in series.

A type switch is like a regular switch statement, but the cases in a type
switch specify types (not values), and those values are compared against
the type of the value held by the given interface value.

	switch v := i.(type) {
	case T:
		// here v has type T
	case S:
		// here v has type S
	default:
		// no match; here v has the same type as i
	}

The declaration in a type switch has the same syntax as a type assertion `i.(T)`,
but the specific type `T` is replaced with the keyword `type`.

This switch statement tests whether the interface value `i`
holds a value of type `T` or `S`.
In each of the `T` and `S` cases, the variable `v` will be of type
`T` or `S` respectively and hold the value held by `i`.
In the default case (where there is no match), the variable `v` is
of the same interface type and value as `i`.

.play methods/type-switches.go

* Stringers

One of the most ubiquitous interfaces is [[//golang.org/pkg/fmt/#Stringer][`Stringer`]] defined by the [[//golang.org/pkg/fmt/][`fmt`]] package.

	type Stringer interface {
		String() string
	}

A `Stringer` is a type that can describe itself as a string. The `fmt` package
(and many others) look for this interface to print values.

.play methods/stringer.go

* Exercise: Stringers

Make the `IPAddr` type implement `fmt.Stringer` to print the address as
a dotted quad.

For instance, `IPAddr{1,`2,`3,`4}` should print as `"1.2.3.4"`.

.play methods/exercise-stringer.go

* Errors

Go programs express error state with `error` values.

The `error` type is a built-in interface similar to `fmt.Stringer`:

	type error interface {
		Error() string
	}

(As with `fmt.Stringer`, the `fmt` package looks for the `error` interface when
printing values.)

Functions often return an `error` value, and calling code should handle errors
by testing whether the error equals `nil`.

	i, err := strconv.Atoi("42")
	if err != nil {
		fmt.Printf("couldn't convert number: %v\n", err)
		return
	}
	fmt.Println("Converted integer:", i)

A nil `error` denotes success; a non-nil `error` denotes failure.

.play methods/errors.go

* Exercise: Errors

Copy your `Sqrt` function from the [[/flowcontrol/8][earlier exercise]] and modify it to return an `error` value.

`Sqrt` should return a non-nil error value when given a negative number, as it doesn't support complex numbers.

Create a new type

	type ErrNegativeSqrt float64

and make it an `error` by giving it a

	func (e ErrNegativeSqrt) Error() string

method such that `ErrNegativeSqrt(-2).Error()` returns `"cannot`Sqrt`negative`number:`-2"`.

*Note:* a call to `fmt.Sprint(e)` inside the `Error` method will send the program into an infinite loop. You can avoid this by converting `e` first: `fmt.Sprint(float64(e))`. Why?

Change your `Sqrt` function to return an `ErrNegativeSqrt` value when given a negative number.

.play methods/exercise-errors.go

* القراء (Readers)

حزمة `io` تحدد واجهة `io.Reader` التي تمثل طرف القراءة من دفق بيانات.

المكتبة المعيارية في Go تحتوي على [[https://golang.org/search?q=Read#Global][تطبيقات كثيرة]] لهذه الواجهات، تتضمن الملفات واتصالات الشبكة والضاغطات والشفرات وأشياء آخرى.

واجهة `io.Reader` لديها وظيفة `Read`:

	func (T) Read(b []byte) (n int, err error)

`Read` تملأ شريحة البايتات بالبيانات وترجع عدد البايتات المعبئة وقيمة خطأ.
عندما ينتهي الدفق الخطأ سيكون `io.EOF`.

هذا المثال ينشئ
[[//golang.org/pkg/strings/#Reader][`strings.Reader`]]
ويستهلك 8 بت من مخرجاته في كل مرة.

.play methods/reader.go

* تمرين: القراء

طبق نوع `Reader` يخرج دفق لا نهائي من حرف ASCII `'A'`.

.play methods/exercise-reader.go

* تمرين: rot13Reader

من الأنماط المتكررة [[https://golang.org/pkg/io/#Reader][io.Reader]] يحيط بـ`io.Reader` آخر، معدلًا الدفق بطريقة ما.

على سبيل المثال، دالة [[https://golang.org/pkg/compress/gzip/#NewReader][gzip.NewReader]] تأخذ `io.Reader` (دفق من البيانات المضغوطة) وترجع `*gzip.Reader` يطبق `io.Reader` (دفق من البيانات مفكوكة الضغط).

طبّق `rot13Reader` يطبق `io.Reader` ويقرأ من `io.Reader`، معدلًا على الدفق بتنفيذ شفرة [[https://en.wikipedia.org/wiki/ROT13][rot13]] التبدالية لكل الحروف الهجائية.

نوع `rot13Reader` مقدم لك.
اجعله `io.Reader` بتطبيق وظيفة `Read`.

.play methods/exercise-rot-reader.go

* الصور

[[https://golang.org/pkg/image/#Image][حزمة image]] تعرف واجهة `Image`:

	package image

	type Image interface {
		ColorModel() color.Model
		Bounds() Rectangle
		At(x, y int) color.Color
	}

*ملاحظة*: نوع المرجع `Rectangle` لوظيفة `Bounds` هو فعليًا
[[https://golang.org/pkg/image/#Rectangle][`image.Rectangle`]]،
لأن الإعلان في داخل حزمة `image`.

(اطلع على [[https://golang.org/pkg/image/#Image][التوثيق]] لجميع التفاصيل.)

الأنواع `color.Color` و `color.Model` هي أيضًا واجهات، ولكن سنتجاهل ذلك باستخدام التطبيقات `color.RGBA` و `color.RGBAModel`.
هذه الواجهات والأنواع محددة من [[https://golang.org/pkg/image/color/][حزمة image/color]]

.play methods/images.go

* تمرين: الصور

هل تذكر مولد الصور الذي كتبت مسبقًا؟
لنكتب مولدًا آخرًا، ولكن هذه المرة سيرجع  تطبيق لـ `image.Image` بدلًا من شريحة بيانات.

عرف نوع `Image` وطبق [[https://golang.org/pkg/image/#Image][الوظائف المطلوبة]]، واستدع `pic.ShowImage`.

`Bounds` ينبغى أن ترجع `image.Rectangle`، مثل `image.Rect(0,`0,`w,`h)`.

`ColorModel` ينبغي أن ترجع `color.RGBAModel`.

`At` ينبغي أن ترجع `color.Color`؛ قيمة `v` في مولد الصور الأخير تتماثل مع `color.RGBA{v,`v,`255,`255}` في هذا المولد.

.play methods/exercise-images.go

* مبروك!

لقد انهيت هذا الدرس!

بإمكانك العودة إلى  [[/list][القائمة]] لتختار ما تتعلمه، أو الاستمرار مع [[javascript:click('.next-page')][الدرس التالي]].
